# Make it use C-a
unbind C-b
set -g prefix C-a
bind a send-prefix  # these last to allow C-a to be passed through
bind C-a send-prefix

# Unbind existing tmux key bindings, except a few that are commented out.
unbind C-o
unbind C-z
unbind Space
unbind !
unbind '"'
unbind '#'
unbind %
unbind &
unbind "'"
unbind ,
unbind -
unbind .
unbind :
unbind =
unbind ?
unbind D
unbind '['
unbind ']'
unbind c
unbind d
unbind f
unbind i
unbind l
unbind n
unbind o
unbind p
unbind q
unbind r
unbind s
unbind t
unbind w
unbind x
unbind '{'
unbind '}'
unbind '~'
unbind PPage
unbind Up
unbind Down
unbind Left
unbind Right
#unbind 0
#unbind 1
#unbind 2
#unbind 3
#unbind 4
#unbind 5
#unbind 6
#unbind 7
#unbind 8
#unbind 9
unbind M-1
unbind M-2
unbind M-3
unbind M-4
unbind M-5
unbind M-n
unbind M-o
unbind M-p
unbind M-Up
unbind M-Down
unbind M-Left
unbind M-Right
unbind C-Up
unbind C-Down
unbind C-Left
unbind C-Right



### KEY BINDINGS
# first unbind, then bind: this allows on-the-fly config reloading (with C-r)
# quick tip: the '-r' flag means they can be pressed repeatedly
# note: I only added the shortcuts I use, please "man tmux" to go beyond


# basic window operations
unbind c
bind c new-window
unbind &  # purposefully diffcult combination, better the shell's "C-d", or kill-pane
bind & confirm-before kill-window
unbind x  # close pane (if last also the window)
bind x confirm-before kill-pane

# window cycling "p" or Left for previous window
unbind p
bind -r p previous-window
unbind Left
bind -r Left previous-window

# "n" and Right for next window
unbind n
bind -r n next-window
unbind Right
bind -r Right next-window

# find a window by name
unbind f
bind f command-prompt "find-window '%%'"

# rename a window (gnuscreen default shortcut)
unbind A
bind A command-prompt "rename-window %%"

# Ctrl-s for last active window
unbind C-s
bind -r C-s last-window

# window picker
unbind w
bind w choose-window


# add split side-by-side
unbind |
bind -r | split-window -h

# add split top-bottom
unbind _
bind -r _ split-window -v

# swap panes
unbind {
bind -r { swap-pane -U
unbind }
bind -r } swap-pane -D

# number panes visibly
unbind q
bind q display-panes

# cycle through pane layouts
unbind Space
bind -r Space next-layout

# change pane focus (like vi cursor movement)
unbind k
bind -r k select-pane -U
unbind j
bind -r j select-pane -D
unbind h
bind -r h select-pane -L
unbind l
bind -r l select-pane -R

# resize pane
unbind '('
bind -r '(' resize-pane -L 4
unbind ')'
bind -r ')' resize-pane -R 4
unbind +
bind -r + resize-pane -U 2
unbind -
bind -r - resize-pane -D 2


# command line
unbind :
bind : command-prompt


# display key bindings
unbind ?
bind ? list-keys


# copy and scroll mode (see "man tmux"), and paste
unbind [
bind [ copy-mode
unbind ]
bind -r ] paste-buffer  # sadly '-r' doesnt work here, hopefully one day it does
unbind PPage
bind PPage copy-mode -u  # to copymode and one page up (pgup/dn passed on)

# additional keys to use in copy (scroll) mode
bind -t emacs-copy Enter copy-selection
bind -t emacs-copy Space begin-selection

# apply the config file again...
unbind r
bind r source-file ~/.tmux.conf

# page up and down
#   --> this has to be done for the shell, vi aparently works well.

# TODO:
# * keybindings for detaching/attaching
# * for session/client/buffer management
# * for buffer filling and pasting
# * mouse scroll fix
# * mouse click focus
# * alt-tab style feature request
# * select+move splitters (need splitter highlighting)
# * quake style "toggle terminal from above", bound to "~"


# its not logic to have the most left 'tab' on the very right of the key strip
set -g base-index 1

# should fix scrolling issues (with shift pgup/dn)
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

# some general config options
setw -g xterm-keys on
#set -g default-terminal "screen-256color"
set -g default-terminal "xterm"
set -g history-limit 10000
set -g repeat-time 800

set -g status on
set -g status-keys vi

set -g bell-action any
set -g visual-bell off # switching this on leads to a disappearing cursor in vim sometimes
setw -g monitor-activity on  # monitor activity of all windows
setw -g monitor-content on   # monitor for content changes as well
set -g visual-activity off   # no flashy messages in my status line please! (watch the window attrs '#-*!+' instead)
set -g visual-content off    # idem
setw -g mode-keys vi
setw -g mode-mouse off  # on prevents mouse select on the terminal
set -g mouse-select-pane off  # on prevents mouse select in panes
setw -g utf8 on

set-window-option -g aggressive-resize on # limit window size to smallest client actually viewing the window (instead of viewing the whole session)

# window title
set -g set-titles on
setw -g automatic-rename on

# status bar
set -g status-utf8 on
set -g status-justify centre
set -g status-interval 5
set -g status-left-length 30
set -g status-left ''
set -g status-right '#[fg=blue,bold]#H#[default] Â» #[fg=magenta]%R#[default]'
set -g status-right-length 45

# colors
set -g message-bg default
set -g message-fg green
set -g status-bg default
set -g status-fg green
setw -g window-status-bg default
setw -g window-status-fg green
#setw -g window-status-alert-attr none
#setw -g window-status-alert-bg default
#setw -g window-status-alert-fg green
setw -g window-status-current-bg red
setw -g window-status-current-fg white

# List of plugins
# Supports `github_username/repo` or full git URLs
set -g @tpm_plugins "              \
  tmux-plugins/tpm                 \
  tmux-plugins/tmux-resurrect      \
"
# Other examples:
# github_username/plugin_name    \
# git@github.com/user/plugin     \
# git@bitbucket.com/user/plugin  \

# Initializes TMUX plugin manager.
# Keep this line at the very bottom of tmux.conf.
run-shell ~/.tmux/plugins/tpm/tpm
